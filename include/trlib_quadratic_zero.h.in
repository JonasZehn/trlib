#ifndef TRLIB_QUADRATIC_ZERO_H
#define TRLIB_QUADRATIC_ZERO_H

/** Computes real zeros of normalized quadratic polynomial.
 *
 *  :param c_abs: absolute coefficient
 *  :type c_abs: trlib_flt_t, input
 *  :param c_lin: coefficinet of linear term
 *  :type c_lin: trlib_flt_t, input
 *  :param tol: tolerance that indicates if ill-conditioning present, good default may be :math:`\texttt{macheps}^{3/4}` (:c:macro:`TRLIB_EPS_POW_75`)
 *  :type tol: trlib_flt_t, input
 *  :param verbose: determines the verbosity level of output that is written to :c:data:`fout`
 *  :type verbose: trlib_int_t, input
 *  :param unicode: set to ``1`` if :c:data:`fout` can handle unicode, otherwise to ``0``
 *  :type unicode: trlib_int_t, input
 *  :param prefix: string that is printed before iteration output
 *  :type prefix: trlib_int_t, input
 *  :param fout: output stream
 *  :type fout: FILE, input
 *  :param t1: first zero, :math:`\texttt{t1} \le \texttt{t2}`
 *  :type t2: trlib_flt_t, output
 *  :param t2: second zero, :math:`\texttt{t1} \le \texttt{t2}`
 *  :type t2: trlib_flt_t, output
 *
 *  :returns: number of zeros
 *  :rtype: trlib_int_t
 */

trlib_int_t trlib_quadratic_zero(trlib_flt_t c_abs, trlib_flt_t c_lin, trlib_flt_t tol,
        trlib_int_t verbose, trlib_int_t unicode, char *prefix, FILE *fout,
        trlib_flt_t *t1, trlib_flt_t *t2);

#endif
