#ifndef TRLIB_TEST_H
#define TRLIB_TEST_H

#cmakedefine TRLIB_TEST_PLOT 1
#include <check.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "trlib.h"
#if TRLIB_TEST_PLOT
    #include <zmq.h>
    #include "trlib_test_matrix_msg.pb-c.h"
#endif

#define TRLIB_TEST_DENSE_QP (0)
#define TRLIB_TEST_TRI_QP   (1)
#define TRLIB_TEST_OP_QP    (3)

#define TRLIB_TEST_SOLVER_KRYLOV (0)
#define TRLIB_TEST_SOLVER_FACTOR (1)

// blas
void daxpy_(trlib_int_t *n, trlib_flt_t *alpha, trlib_flt_t *x, trlib_int_t *incx, trlib_flt_t *y, trlib_int_t *incy);
void dscal_(trlib_int_t *n, trlib_flt_t *alpha, trlib_flt_t *x, trlib_int_t *incx);
void dcopy_(trlib_int_t *n, trlib_flt_t *x, trlib_int_t *incx, trlib_flt_t *y, trlib_int_t *incy);
trlib_flt_t dnrm2_(trlib_int_t *n, trlib_flt_t *x, trlib_int_t *incx);
trlib_flt_t ddot_(trlib_int_t *n, trlib_flt_t *x, trlib_int_t *incx, trlib_flt_t *y, trlib_int_t *incy);

// lapack
void dpttrf_(trlib_int_t *n, trlib_flt_t *d, trlib_flt_t *e, trlib_int_t *info);
void dpttrs_(trlib_int_t *n, trlib_int_t *nrhs, trlib_flt_t *d, trlib_flt_t *e, trlib_flt_t *b, trlib_int_t *ldb, trlib_int_t *info);
void dptrfs_(trlib_int_t *n, trlib_int_t *nrhs, trlib_flt_t *d, trlib_flt_t *e, trlib_flt_t *df, trlib_flt_t *ef, trlib_flt_t *b, trlib_int_t *ldb, trlib_flt_t *x, trlib_int_t *ldx, trlib_flt_t *ferr, trlib_flt_t *berr, trlib_flt_t *work, trlib_int_t *info);
void dlagtm_(char *trans, trlib_int_t *n, trlib_int_t *nrhs, trlib_flt_t *alpha, trlib_flt_t *dl, trlib_flt_t *d, trlib_flt_t *du, trlib_flt_t *x, trlib_int_t *ldx, trlib_flt_t *beta, trlib_flt_t *b, trlib_int_t *ldb);

struct trlib_test_problem_dense {
    trlib_int_t n;                   ///< dimension
    trlib_flt_t *hess;            ///< dense hessian
    trlib_flt_t *grad;            ///< gradient of quadratic form
    trlib_flt_t *sol;             ///< solution
};

struct trlib_test_problem_tri {
    trlib_int_t n;                   ///< dimension
    trlib_flt_t *diag;            ///< diagonal in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *offdiag;         ///< offdiagonal in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *diag_fac;        ///< factorization of diagonal in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *offdiag_fac;     ///< factorization of offdiagonal in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *diag_fac0;       ///< factorization of diagonal in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *offdiag_fac0;    ///< factorization of offdiagonal in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *grad;            ///< gradient of quadratic form
    trlib_flt_t *neggrad;         ///< negative of gradient in case of #TRLIB_TEST_TRI_QP
    trlib_flt_t *sol;             ///< solution
    trlib_flt_t *sol0;            ///< solution
    trlib_int_t warm_fac;            ///< factorization is accurate in case of #TRLIB_TEST_TRI_QP
    trlib_int_t warm_fac0;           ///< factorization is accurate in case of #TRLIB_TEST_TRI_QP
    trlib_int_t pos_def;             ///< indicate if we know that hessian is positive definite in #TRLIB_TEST_TRI_QP
};

struct trlib_test_problem_op {
    trlib_int_t n;                   ///< dimension
    trlib_flt_t *grad;            ///< gradient
    trlib_flt_t *sol;             ///< solution
    void *userdata;          ///< context pointer
    void (*hv)(void *, trlib_int_t, trlib_flt_t *, trlib_flt_t *); ///< callback function for hessian vector product
};

struct trlib_test_work_krylov {
    trlib_int_t *iwork;              ///< integer work space
    trlib_flt_t *fwork;           ///< floating point workspace
    trlib_flt_t *g;               ///< gradient
    trlib_flt_t *gm;              ///< previous gradient
    trlib_flt_t *p;               ///< direction
    trlib_flt_t *Hp;              ///< hessian product
    trlib_flt_t *Q;               ///< matrix with Lanczos directions
    trlib_flt_t *orth_check;      ///< compute orthonormality of generated directions
};

struct trlib_test_work_factor {
    trlib_flt_t *fwork;           ///< floating point workspace
    trlib_flt_t *ones;            ///< array of all ones
    trlib_int_t nirblk;              ///< number of irreducible blocks
    trlib_int_t *irblk;              ///< indices of irreducible blocks
    trlib_flt_t *leftmost;        ///< estimation of leftmost eigenvalues for blocks
    trlib_int_t ileftmost;           ///< index to block with smallest leftmost
    trlib_int_t warm_leftmost;       ///< leftmost is accurate
    trlib_int_t warm_lam;            ///< lam is accurate
    trlib_int_t warm_lam0;           ///< lam0 is accurate
    trlib_flt_t lam0;             ///< multiplier corresponding to first block
};

struct trlib_test_qp {
    trlib_int_t qptype;              ///< either #TRLIB_TEST_DENSE_QP or #TRLIB_TEST_TRI_QP
    trlib_int_t qpsolver;            ///< either #TRLIB_TEST_SOLVER_KRYLOV or #TRLIB_TEST_SOLVER_FACTOR
    void* problem;           ///< problem specific storage
    void *work;              ///< solver specific workspace
    trlib_int_t itmax;               ///< maximum number of iterations
    char *prefix;            ///< prefix that is printed
    trlib_int_t verbose;             ///< print level
    trlib_int_t unicode;             ///< output stream supports unicode
    FILE *stream;            ///< output stream
    trlib_flt_t radius;           ///< trust region radius
    trlib_int_t equality;            ///< consider trust region constraint as equality
    trlib_int_t reentry;             ///< hotstart on problem?
    trlib_int_t refine;              ///< use iterative refinement on solution of linear equations
    trlib_int_t *timing;            ///< statistics
    trlib_flt_t lam;              ///< lagrange multiplier
    trlib_flt_t tol_rel_i;        ///< relative stop tolerance interior case
    trlib_flt_t tol_abs_i;        ///< absolute stop tolerance interior case
    trlib_flt_t tol_rel_b;        ///< relative stop tolerance boundary case
    trlib_flt_t tol_abs_b;        ///< absolute stop tolerance boundary case
    trlib_int_t ret;                 ///< return value from qp solver
    trlib_int_t sub_fail;            ///< return value from subroutines called by qp solver
    trlib_int_t iter;                ///< number of iterations
    trlib_int_t ctl_invariant;       ///< in case of #TRLIB_TEST_SOLVER_KRYLOV behaviour towards multiple invariant subspaces
    trlib_flt_t obj;              ///< objective
    trlib_flt_t obj_check;        ///< objective recomputed by trlib_test_check_optimality
    trlib_flt_t pos_def_res;      ///< perturbation needed to obtain positive definiteness
    trlib_flt_t kkt_res;          ///< KKT residual
    trlib_flt_t tr_res;           ///< trust region residual
    trlib_flt_t orth_res;         ///< orthonormality residual
};

void dgemv_(char *trans, trlib_int_t *m, trlib_int_t *n, trlib_flt_t *alpha, trlib_flt_t *a, trlib_int_t *lda, trlib_flt_t *x, trlib_int_t *incx, trlib_flt_t *beta, trlib_flt_t *y, trlib_int_t *incy);
void dpotrf_(char *uplo, trlib_int_t *n, trlib_flt_t *a, trlib_int_t *lda, trlib_int_t *info);

trlib_int_t trlib_test_malloc_qp(trlib_int_t qptype, trlib_int_t qpsolver, trlib_int_t n, trlib_int_t itmax, struct trlib_test_qp *qp);
trlib_int_t trlib_test_free_qp(struct trlib_test_qp *qp);
trlib_int_t trlib_test_solve_qp(struct trlib_test_qp *qp);
trlib_int_t trlib_test_pos_def_perturb(struct trlib_test_qp *qp);
trlib_int_t trlib_test_check_optimality(struct trlib_test_qp *qp);
trlib_int_t trlib_test_problem_set_hvcb(struct trlib_test_problem_op* problem, void *userdata, void (*hv_cb)(void *, trlib_int_t, trlib_flt_t *, trlib_flt_t *));
trlib_int_t trlib_test_resolve_new_gradient(struct trlib_test_qp *qp);
void trlib_test_solve_check_qp(struct trlib_test_qp *qp, char *name, trlib_flt_t tol, trlib_flt_t lanczos_tol);
void trlib_test_print_result(struct trlib_test_qp *qp, char *name, trlib_flt_t tol, trlib_flt_t lanczos_tol);

#endif
